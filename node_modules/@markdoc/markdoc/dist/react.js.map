{
  "version": 3,
  "sources": ["../src/tag.ts", "../src/renderers/react/react.ts"],
  "sourcesContent": ["import type { RenderableTreeNode } from './types';\n\nexport default class Tag<\n  N extends string = string,\n  A extends Record<string, any> = Record<string, any>\n> {\n  readonly $$mdtype = 'Tag' as const;\n\n  static isTag = (tag: any): tag is Tag => {\n    return !!(tag?.$$mdtype === 'Tag');\n  };\n\n  name: N;\n  attributes: A;\n  children: RenderableTreeNode[];\n\n  constructor(\n    name = 'div' as N,\n    attributes = {} as A,\n    children: RenderableTreeNode[] = []\n  ) {\n    this.name = name;\n    this.attributes = attributes;\n    this.children = children;\n  }\n}\n", "import Tag from '../../tag';\nimport { RenderableTreeNodes, Scalar } from '../../types';\n\nimport type { createElement, ComponentType, Fragment, ReactNode } from 'react';\n\ntype ReactShape = Readonly<{\n  createElement: typeof createElement;\n  Fragment: typeof Fragment;\n}>;\n\ntype Component = ComponentType<unknown>;\n\nfunction tagName(\n  name: string,\n  components: Record<string, Component> | ((string: string) => Component)\n): string | Component {\n  return typeof name !== 'string'\n    ? name // This can be an object, e.g. when React.forwardRef is used\n    : name[0] !== name[0].toUpperCase()\n    ? name\n    : components instanceof Function\n    ? components(name)\n    : components[name];\n}\n\nexport default function dynamic(\n  node: RenderableTreeNodes,\n  React: ReactShape,\n  { components = {} } = {}\n) {\n  function deepRender(value: any): any {\n    if (value == null || typeof value !== 'object') return value;\n\n    if (Array.isArray(value)) return value.map((item) => deepRender(item));\n\n    if (value.$$mdtype === 'Tag') return render(value);\n\n    if (typeof value !== 'object') return value;\n\n    const output: Record<string, Scalar> = {};\n    for (const [k, v] of Object.entries(value)) output[k] = deepRender(v);\n    return output;\n  }\n\n  function render(node: RenderableTreeNodes): ReactNode {\n    if (Array.isArray(node))\n      return React.createElement(React.Fragment, null, ...node.map(render));\n\n    if (node === null || typeof node !== 'object' || !Tag.isTag(node))\n      return node;\n\n    const {\n      name,\n      attributes: { class: className, ...attrs } = {},\n      children = [],\n    } = node;\n\n    if (className) attrs.className = className;\n\n    return React.createElement(\n      tagName(name, components),\n      Object.keys(attrs).length == 0 ? null : deepRender(attrs),\n      ...children.map(render)\n    );\n  }\n\n  return render(node);\n}\n"],
  "mappings": ";AAEA,gBAGE;AAAA,EAWA,YACE,OAAO,OACP,aAAa,IACb,WAAiC,IACjC;AAdO,oBAAW;AAelB,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,WAAW;AAAA;AAAA;AAfX,AANT,IAMS,QAAQ,CAAC,QAAyB;AACvC,SAAO,CAAC,CAAE,MAAK,aAAa;AAAA;;;ACGhC,iBACE,MACA,YACoB;AACpB,SAAO,OAAO,SAAS,WACnB,OACA,KAAK,OAAO,KAAK,GAAG,gBACpB,OACA,sBAAsB,WACtB,WAAW,QACX,WAAW;AAAA;AAGF,iBACb,MACA,OACA,EAAE,aAAa,OAAO,IACtB;AACA,sBAAoB,OAAiB;AACnC,QAAI,SAAS,QAAQ,OAAO,UAAU;AAAU,aAAO;AAEvD,QAAI,MAAM,QAAQ;AAAQ,aAAO,MAAM,IAAI,CAAC,SAAS,WAAW;AAEhE,QAAI,MAAM,aAAa;AAAO,aAAO,OAAO;AAE5C,QAAI,OAAO,UAAU;AAAU,aAAO;AAEtC,UAAM,SAAiC;AACvC,eAAW,CAAC,GAAG,MAAM,OAAO,QAAQ;AAAQ,aAAO,KAAK,WAAW;AACnE,WAAO;AAAA;AAGT,kBAAgB,OAAsC;AACpD,QAAI,MAAM,QAAQ;AAChB,aAAO,MAAM,cAAc,MAAM,UAAU,MAAM,GAAG,MAAK,IAAI;AAE/D,QAAI,UAAS,QAAQ,OAAO,UAAS,YAAY,CAAC,IAAI,MAAM;AAC1D,aAAO;AAET,UAAM;AAAA,MACJ;AAAA,MACA,YAAY,EAAE,OAAO,cAAc,UAAU;AAAA,MAC7C,WAAW;AAAA,QACT;AAEJ,QAAI;AAAW,YAAM,YAAY;AAEjC,WAAO,MAAM,cACX,QAAQ,MAAM,aACd,OAAO,KAAK,OAAO,UAAU,IAAI,OAAO,WAAW,QACnD,GAAG,SAAS,IAAI;AAAA;AAIpB,SAAO,OAAO;AAAA;",
  "names": []
}
